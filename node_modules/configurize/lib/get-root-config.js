'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConfig = getConfig;
exports.getServerConfigPath = getServerConfigPath;
exports.getBrowserConfigPath = getBrowserConfigPath;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getConfig(vent) {
  var _getConfigModule = getConfigModule();

  var module = _getConfigModule.module;
  var file = _getConfigModule.file;

  var rootConf = parseConfig(module);
  vent.emit('root-config', rootConf, file);
  return rootConf || {};
}

function getConfigModule() {
  var file = void 0;
  var module = void 0;
  // TODO(vjpr): Check this don't break nothing!
  //   We might have to add it to webpack config.
  if (__CLIENT__) {
    // TODO(vjpr): This method is only for server-side.
    // file = getBrowserConfigPath()
    // module = require(file)
    module = require('configurize.browser.js');
  } else {
    file = getServerConfigPath();
    module = _fs2.default.existsSync(file) ? require(file) : null;
  }
  return { file: file, module: module };
}

function parseConfig(module) {
  var opts = {};
  return _lodash2.default.isFunction(module) ? module(opts) : module;
}

// TODO(vjpr): Use the strategy that webpackerator and babelator use for finding the config path.
function getServerConfigPath() {

  var envPath = process.env.CONFIGURIZE_CONFIG_PATH;
  if (_lodash2.default.get(process, 'versions.electron')) {
    // NOTE: require('app') will only exist in an Electron app.
    return envPath || _path2.default.join(require('app').getAppPath(), '.configurize.js');
  } else {
    var cwd = require('cwd');
    return envPath || cwd('.configurize.js');
  }
}

// NOTE: This is for server-side usage for generating our webpack config.
function getBrowserConfigPath() {
  var cwd = require('cwd');
  return require.resolve(process.env.CONFIGURIZE_BROWSER_CONFIG_PATH || cwd('.configurize.browser.js'));
}
//# sourceMappingURL=get-root-config.js.map
