import check from 'check-types'
import {debug} from 'zog'

// serviceHub - A LiveServiceHub instance.
// services - Dictionary of service names to consume and provide.
//   {consume, provide}
// module - Service names from the `services` dict correspond to function names
//   on this object.
export default function({serviceHub, services, module, modulePath}) {

  if (!services) return

  // TODO(vjpr): `this` is not working inside named functions. WTF.
  //   Maybe a old buggy babel version.

  const consumers = (obj) => {
    for (const keyPath in obj) {
      const versionToFnName = obj[keyPath]
      for (const version in versionToFnName) {
        const fnName = versionToFnName[version]
        let consumerCallback = module[fnName]
        if (!consumerCallback) {
          throw new Error(`Consumer callback method '${fnName}' not found on module '${modulePath}'. Using version dict: ${JSON.stringify(versionToFnName)}.`)
        }
        consumerCallback = consumerCallback.bind(module)
        // TODO(vjpr): Instrument consumerCallback for logging.
        serviceHub.consume(keyPath, version, consumerCallback)
      }
    }
  }

  const providers = (obj) => {
    for (const keyPath in obj) {
      const versionToFnName = obj[keyPath]
      check.object(versionToFnName)
      for (const version in versionToFnName) {
        const fnName = versionToFnName[version]
        let serviceGetter = module[fnName]
        if (!serviceGetter) {
          throw new Error(`Service getter method '${fnName}' not found on module '${modulePath}'. Using version dict: ${JSON.stringify(versionToFnName)}.`)
        }
        serviceGetter = serviceGetter.bind(module)
        debug('Initializing provider service', keyPath, version)
        let service = serviceGetter()
        if (!service) {
          throw new Error(`Service getter method '${fnName}' on module '${modulePath}' did not return anything. Using version dict: ${JSON.stringify(versionToFnName)}.`)
        }
        serviceHub.provide(keyPath, version, service)
      }
    }
  }

  if (services.consume) consumers(services.consume)
  if (services.provide) providers(services.provide)

}
