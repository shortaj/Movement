'use strict';

var _configurize = require('configurize');

// Start timing server startup time asap.
global.liveStartTime = new Date();

var _require = require('zog');

var log = _require.log;

log('Starting Live app...');

var _ = require('lodash');


function getOpts(opts) {
  return _.defaultsDeep(opts, {
    moduleDirectories: _configurize.config.get('live.moduleDirectories', []),
    globals: _configurize.config.get('live.globals', {}),
    configurePromises: true
  });
}

////////////////////////////////////////////////////////////////////////////////

module.exports = function () {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];


  opts = getOpts(opts);

  ////////////////////////////////////////////////////////////////////////////////
  // Promises
  ////////////////////////////////////////////////////////////////////////////////

  if (global.__CLIENT__ && opts.configurePromises) require('./promises')();

  //////////////////////////////////////////////////////////////////////////////
  // NODE_PATH
  //////////////////////////////////////////////////////////////////////////////

  if (!global.__CLIENT__) {
    (function () {
      var addPath = require('app-module-path').addPath;
      opts.moduleDirectories.map(function (dir) {
        addPath(dir);
      });
    })();
  }

  //////////////////////////////////////////////////////////////////////////////
  // Module aliases
  //////////////////////////////////////////////////////////////////////////////

  // TODO(vjpr)

  // Globals
  //////////////////////////////////////////////////////////////////////////////

  if (global.__CLIENT__) {
    // NOTE: In webpack config if `node.global = 'window'` then `window` will also be `global`.
    _(opts.globals).forEach(function (v, k) {
      window[k] = v;
    });
  } else {
    _(opts.globals).forEach(function (v, k) {
      global[k] = v;
    });
  }

  // TODO(vjpr)

  //////////////////////////////////////////////////////////////////////////////
  // Skip style requires when server side.
  //////////////////////////////////////////////////////////////////////////////

  // TODO(vjpr): Use style collector and serve css.
  if (!global.__CLIENT__) require.extensions['.less'] = function () {
    return null;
  };
  if (!global.__CLIENT__) require.extensions['.css'] = function () {
    return null;
  };

  //////////////////////////////////////////////////////////////////////////////
  // Unhandled promises
  //////////////////////////////////////////////////////////////////////////////

  if (global.__CLIENT__) {

    window.addEventListener('unhandledrejection', function (e) {
      e.preventDefault();
      var _e$detail = e.detail;
      var reason = _e$detail.reason;
      var promise = _e$detail.promise;

      console.log({ reason: reason });
      console.log(e.stack);
    });
  } else {

    // Capture unhandler promise rejections.
    // NOTE: Requires io.js or core-js.
    process.on('unhandledRejection', function (e, promise) {
      console.log(e.stack);
    });
  }

  //////////////////////////////////////////////////////////////////////////////
  // Babel
  //////////////////////////////////////////////////////////////////////////////

  if (!global.__CLIENT__ && !global.__LIVE_DISABLE_BABEL__) {
    require('./roadrunner');
    require('babel-register')(_.clone(opts.babel));
    require('babel-polyfill');
  }

  // Enable to save cached roadrunner after server starts and *most* of the dependencies
  // have been loaded.
  //require('./roadrunner').saveRequireResolveCache()
};
//# sourceMappingURL=index.js.map
